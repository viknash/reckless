// Reckless
//------------------------------------------------------------------------------
{
	.ProjectName		= 'Reckless'
	.BasePath			= '../extern/reckless'
	.ProjectPath		= 'reckless/src'
	.OutputBase 		= '$BasePath$/tmp' 
	.OutputBinBase 		= '$BasePath$/bin'
	.OutputLibBase 		= '$BasePath$/lib'
	.OutputIncBase 		= '$BasePath$/reckless/include'
	// Visual Studio Project Generation
	//--------------------------------------------------------------------------
	VCXProject( '$ProjectName$-proj' )
	{
		.ProjectOutput				= '$OutputBase$/VisualStudio/Projects/$ProjectName$.vcxproj'
		.ProjectInputPaths			= {
										'$BasePath$\$ProjectPath$\',
										'$OutputIncBase$\'
										}
		.ProjectFiles 				= '$BasePath$/fbuild.bff'
		.ProjectBasePath			= '$BasePath$\$ProjectPath$\'

	}

    // Unity
    //--------------------------------------------------------------------------
    {
        // Common options
        .UnityInputPath							   = '$BasePath$\$ProjectPath$\'
        .UnityOutputPath            = '$OutputBase$\Unity\$ProjectPath$\'

        // Windows
        Unity( '$ProjectName$-Unity-Windows' )
        {
        }

        // Linux
        Unity( '$ProjectName$-Unity-Linux' )
        {
        }

        // OSX
        Unity( '$ProjectName$-Unity-OSX' )
        {
        }
    }       

	// Windows (MSVC)
	//--------------------------------------------------------------------------
	ForEach( .Config in .Configs_Windows_MSVC )
	{
		Using( .Config )
		.OutputBase + '\$Platform$-$Config$'
		.OutputBinBase + '\$Platform$-$Config$'
		.OutputLibBase + '\$Platform$-$Config$'

		// Objects
		Library( '$ProjectName$-Lib-$Platform$-$Config$' )
		{
			// Input (Unity)
			.CompilerInputUnity			= '$ProjectName$-Unity-Windows'

			// Output
			.CompilerOutputPath			= '$OutputBase$\$ProjectPath$\'
 			.LibrarianOutput 			= '$OutputBase$\$ProjectPath$\$ProjectName$.lib'
		}


		Copy( '$ProjectName$-CopyLib-$Platform$-$Config$' )
		{
		  .Source   = '$OutputBase$\$ProjectPath$\$ProjectName$.lib'
		  .Dest     = '$OutputLibBase$\'
		}

		Alias( '$ProjectName$-$Platform$-$Config$' )
		{ 
			.Targets = { 
						 '$ProjectName$-CopyLib-$Platform$-$Config$'
					   }
		}
	}

	// Windows (Clang)
	//--------------------------------------------------------------------------
	ForEach( .Config in .Configs_Windows_Clang )
	{
		Using( .Config )
		.OutputBase + '\$Platform$-$Config$'
		.OutputBinBase + '\$Platform$-$Config$'
		.OutputLibBase + '\$Platform$-$Config$'

		// Static Library
		Library( '$ProjectName$-Lib-$Platform$-$Config$' )
		{
			.CompilerOptions + ' -I"$ProjectPath$"'
			// Input (Unity)
			.CompilerInputUnity			= '$ProjectName$-Unity-Windows'

			// Output
			.CompilerOutputPath			= '$OutputBase$\$ProjectPath$\'
 			.LibrarianOutput 			= '$OutputBase$\$ProjectPath$\$ProjectName$.a'
		}

		Copy( '$ProjectName$-CopyLib-$Platform$-$Config$' )
		{
		  .Source   = '$OutputBase$\$ProjectPath$\$ProjectName$.lib'
		  .Dest     = '$OutputLibBase$\'
		}

		Alias( '$ProjectName$-$Platform$-$Config$' )
		{ 
			.Targets = { '$ProjectName$-CopyLib-$Platform$-$Config$'   }
		}
	}
	
    // Windows (GCC)
    //--------------------------------------------------------------------------
    ForEach(.Config in.Configs_Windows_GCC)
    {
        Using(.Config)
        .OutputBase + '\$Platform$-$Config$'
        .OutputBinBase + '\$Platform$-$Config$'
        .OutputLibBase + '\$Platform$-$Config$'

        // Static Library
        Library('$ProjectName$-Lib-$Platform$-$Config$')
        {
			.CompilerOptions + ' -I"$ProjectPath$"'
			.CompilerInputPath = '$BasePath$\$ProjectPath$\'
            // Input (Unity)
            .CompilerInputUnity = '$ProjectName$-Unity-Windows'

            // Output
            .CompilerOutputPath = '$OutputBase$\$ProjectPath$\'
            .LibrarianOutput = '$OutputBase$\$ProjectPath$\lib$ProjectName$.a'
        }

        Copy('$ProjectName$-CopyLib-$Platform$-$Config$')
        {
            .Source = '$OutputBase$\$ProjectPath$\lib$ProjectName$.a'
            .Dest = '$OutputLibBase$\'
        }

        Alias('$ProjectName$-$Platform$-$Config$')
        {
            .Targets = { '$ProjectName$-CopyLib-$Platform$-$Config$' }
        }
    }

    // Linux (GCC)
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs_Linux_GCC )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'
        .OutputBinBase + '\$Platform$-$Config$'
        .OutputLibBase + '\$Platform$-$Config$'

        // Static Library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-Linux'

            // Output
            .CompilerOutputPath         = '$OutputBase$\$ProjectPath$\'
            .LibrarianOutput            = '$OutputBase$\$ProjectPath$\$ProjectName$.a'
        }

        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
    }	

    // OSX (Clang)
    //--------------------------------------------------------------------------
    ForEach( .Config in .Configs_OSX_Clang )
    {
        Using( .Config )
        .OutputBase + '\$Platform$-$Config$'

        // Static Library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            // Input (Unity)
            .CompilerInputUnity         = '$ProjectName$-Unity-OSX'

            // Output
            .CompilerOutputPath         = '$OutputBase$\$ProjectPath$\'
            .LibrarianOutput            = '$OutputBase$\$ProjectPath$\$ProjectName$.a'
        }

        Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
    }	

	// Aliases
	//--------------------------------------------------------------------------
	// Per-Config
	Alias( '$ProjectName$-Debug' )		{ .Targets = { '$ProjectName$-X86-Debug',   '$ProjectName$-X64-Debug', '$ProjectName$-X86Clang-Debug' } }
	Alias( '$ProjectName$-Profile' )	{ .Targets = { '$ProjectName$-X86-Profile', '$ProjectName$-X64-Profile' } }
	Alias( '$ProjectName$-Release' )	{ .Targets = { '$ProjectName$-X86-Release', '$ProjectName$-X64-Release', '$ProjectName$-X86Clang-Release' } }

	// Per-Platform
	Alias( '$ProjectName$-X86' )		{ .Targets = { '$ProjectName$-X86-Debug', '$ProjectName$-X86-Release', '$ProjectName$-X86-Profile' } }
	Alias( '$ProjectName$-X64' )		{ .Targets = { '$ProjectName$-X64-Debug', '$ProjectName$-X64-Release', '$ProjectName$-X64-Profile' } }
	Alias( '$ProjectName$-X86Clang' )	{ .Targets = { '$ProjectName$-X86Clang-Debug', '$ProjectName$-X86Clang-Release' } }
    Alias( '$ProjectName$-x64Linux' )   { .Targets = { '$ProjectName$-X64Linux-Debug', 	'$ProjectName$-X64Linux-Release', '$ProjectName$-X64Linux-Profile' } }
    Alias( '$ProjectName$-x64OSX' )   	{ .Targets = { '$ProjectName$-X64OSX-Debug', 	'$ProjectName$-X64OSX-Release',   '$ProjectName$-X64OSX-Profile' } }

	// All
	Alias( '$ProjectName$' )
	{
		.Targets = { '$ProjectName$-Debug', '$ProjectName$-Profile', '$ProjectName$-Release' }
	}
}
